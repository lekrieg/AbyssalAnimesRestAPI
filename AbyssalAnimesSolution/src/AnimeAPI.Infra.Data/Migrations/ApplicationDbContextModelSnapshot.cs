// <auto-generated />
using System;
using AnimeAPI.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AnimeAPI.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AnimeAPI.Domain.Entities.Anime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("character varying(400)");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReleaseSeason")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Studio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("TotalEpisodesAmount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Anime");
                });

            modelBuilder.Entity("AnimeAPI.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnimeId")
                        .HasColumnType("integer");

                    b.Property<byte[]>("EpisodeData")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("AnimeAPI.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Avant garde"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Boys love"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Demons"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Ecchi"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Girls love"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Gourmet"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Harem"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Isekai"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Iyashikei"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Josei"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Kids"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Magic"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Mahou shoujo"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Martial arts"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Mecha"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Military"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Parody"
                        },
                        new
                        {
                            Id = 26,
                            Name = "Psychological"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Reverse harem"
                        },
                        new
                        {
                            Id = 28,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 29,
                            Name = "School"
                        },
                        new
                        {
                            Id = 30,
                            Name = "Sci-fi"
                        },
                        new
                        {
                            Id = 31,
                            Name = "Seinen"
                        },
                        new
                        {
                            Id = 32,
                            Name = "Shoujo"
                        },
                        new
                        {
                            Id = 33,
                            Name = "Shounen"
                        },
                        new
                        {
                            Id = 34,
                            Name = "Slice of life"
                        },
                        new
                        {
                            Id = 35,
                            Name = "Space"
                        },
                        new
                        {
                            Id = 36,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 37,
                            Name = "Super power"
                        },
                        new
                        {
                            Id = 38,
                            Name = "Supernatural"
                        },
                        new
                        {
                            Id = 39,
                            Name = "Suspense"
                        },
                        new
                        {
                            Id = 40,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 41,
                            Name = "Vampire"
                        });
                });

            modelBuilder.Entity("AnimeAPI.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "On hold"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Canceled"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Releasing"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Not yet aired"
                        });
                });

            modelBuilder.Entity("AnimeGenre", b =>
                {
                    b.Property<int>("AnimesId")
                        .HasColumnType("integer");

                    b.Property<int>("GenresId")
                        .HasColumnType("integer");

                    b.HasKey("AnimesId", "GenresId");

                    b.HasIndex("GenresId");

                    b.ToTable("AnimeGenre");
                });

            modelBuilder.Entity("AnimeAPI.Domain.Entities.Anime", b =>
                {
                    b.HasOne("AnimeAPI.Domain.Entities.Status", "Status")
                        .WithMany("Animes")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AnimeAPI.Domain.Entities.Episode", b =>
                {
                    b.HasOne("AnimeAPI.Domain.Entities.Anime", "Anime")
                        .WithMany("Episodes")
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("AnimeGenre", b =>
                {
                    b.HasOne("AnimeAPI.Domain.Entities.Anime", null)
                        .WithMany()
                        .HasForeignKey("AnimesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AnimeAPI.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AnimeAPI.Domain.Entities.Anime", b =>
                {
                    b.Navigation("Episodes");
                });

            modelBuilder.Entity("AnimeAPI.Domain.Entities.Status", b =>
                {
                    b.Navigation("Animes");
                });
#pragma warning restore 612, 618
        }
    }
}
